// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: criu-core.proto

package images

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// These match the SECCOMP_MODE_* flags from <linux/seccomp.h>.
type SeccompMode int32

const (
	SeccompMode_disabled SeccompMode = 0
	SeccompMode_strict   SeccompMode = 1
	SeccompMode_filter   SeccompMode = 2
)

// Enum value maps for SeccompMode.
var (
	SeccompMode_name = map[int32]string{
		0: "disabled",
		1: "strict",
		2: "filter",
	}
	SeccompMode_value = map[string]int32{
		"disabled": 0,
		"strict":   1,
		"filter":   2,
	}
)

func (x SeccompMode) Enum() *SeccompMode {
	p := new(SeccompMode)
	*p = x
	return p
}

func (x SeccompMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeccompMode) Descriptor() protoreflect.EnumDescriptor {
	return file_criu_core_proto_enumTypes[0].Descriptor()
}

func (SeccompMode) Type() protoreflect.EnumType {
	return &file_criu_core_proto_enumTypes[0]
}

func (x SeccompMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SeccompMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SeccompMode(num)
	return nil
}

// Deprecated: Use SeccompMode.Descriptor instead.
func (SeccompMode) EnumDescriptor() ([]byte, []int) {
	return file_criu_core_proto_rawDescGZIP(), []int{0}
}

type CoreEntryMarch int32

const (
	CoreEntry_UNKNOWN CoreEntryMarch = 0
	CoreEntry_X86_64  CoreEntryMarch = 1
	CoreEntry_ARM     CoreEntryMarch = 2
	CoreEntry_AARCH64 CoreEntryMarch = 3
	CoreEntry_PPC64   CoreEntryMarch = 4
	CoreEntry_S390    CoreEntryMarch = 5
	CoreEntry_MIPS    CoreEntryMarch = 6
)

// Enum value maps for CoreEntryMarch.
var (
	CoreEntryMarch_name = map[int32]string{
		0: "UNKNOWN",
		1: "X86_64",
		2: "ARM",
		3: "AARCH64",
		4: "PPC64",
		5: "S390",
		6: "MIPS",
	}
	CoreEntryMarch_value = map[string]int32{
		"UNKNOWN": 0,
		"X86_64":  1,
		"ARM":     2,
		"AARCH64": 3,
		"PPC64":   4,
		"S390":    5,
		"MIPS":    6,
	}
)

func (x CoreEntryMarch) Enum() *CoreEntryMarch {
	p := new(CoreEntryMarch)
	*p = x
	return p
}

func (x CoreEntryMarch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreEntryMarch) Descriptor() protoreflect.EnumDescriptor {
	return file_criu_core_proto_enumTypes[1].Descriptor()
}

func (CoreEntryMarch) Type() protoreflect.EnumType {
	return &file_criu_core_proto_enumTypes[1]
}

func (x CoreEntryMarch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CoreEntryMarch) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CoreEntryMarch(num)
	return nil
}

// Deprecated: Use CoreEntryMarch.Descriptor instead.
func (CoreEntryMarch) EnumDescriptor() ([]byte, []int) {
	return file_criu_core_proto_rawDescGZIP(), []int{5, 0}
}

type TaskCoreEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskState   *uint32           `protobuf:"varint,1,req,name=task_state,json=taskState" json:"task_state,omitempty"`
	ExitCode    *uint32           `protobuf:"varint,2,req,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	Personality *uint32           `protobuf:"varint,3,req,name=personality" json:"personality,omitempty"`
	Flags       *uint32           `protobuf:"varint,4,req,name=flags" json:"flags,omitempty"`
	BlkSigset   *uint64           `protobuf:"varint,5,req,name=blk_sigset,json=blkSigset" json:"blk_sigset,omitempty"`
	Comm        *string           `protobuf:"bytes,6,req,name=comm" json:"comm,omitempty"`
	Timers      *TaskTimersEntry  `protobuf:"bytes,7,opt,name=timers" json:"timers,omitempty"`
	Rlimits     *TaskRlimitsEntry `protobuf:"bytes,8,opt,name=rlimits" json:"rlimits,omitempty"`
	CgSet       *uint32           `protobuf:"varint,9,opt,name=cg_set,json=cgSet" json:"cg_set,omitempty"`
	SignalsS    *SignalQueueEntry `protobuf:"bytes,10,opt,name=signals_s,json=signalsS" json:"signals_s,omitempty"`
	// These two are deprecated, should be per-thread
	OldSeccompMode   *SeccompMode `protobuf:"varint,11,opt,name=old_seccomp_mode,json=oldSeccompMode,enum=SeccompMode" json:"old_seccomp_mode,omitempty"`
	OldSeccompFilter *uint32      `protobuf:"varint,12,opt,name=old_seccomp_filter,json=oldSeccompFilter" json:"old_seccomp_filter,omitempty"`
	Loginuid         *uint32      `protobuf:"varint,13,opt,name=loginuid" json:"loginuid,omitempty"`
	OomScoreAdj      *int32       `protobuf:"varint,14,opt,name=oom_score_adj,json=oomScoreAdj" json:"oom_score_adj,omitempty"`
	Sigactions       []*SaEntry   `protobuf:"bytes,15,rep,name=sigactions" json:"sigactions,omitempty"`
	ChildSubreaper   *bool        `protobuf:"varint,18,opt,name=child_subreaper,json=childSubreaper" json:"child_subreaper,omitempty"`
	// Reserved for container relative start time
	// optional uint64		start_time	= 19;
	BlkSigsetExtended *uint64 `protobuf:"varint,20,opt,name=blk_sigset_extended,json=blkSigsetExtended" json:"blk_sigset_extended,omitempty"`
}

func (x *TaskCoreEntry) Reset() {
	*x = TaskCoreEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criu_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCoreEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCoreEntry) ProtoMessage() {}

func (x *TaskCoreEntry) ProtoReflect() protoreflect.Message {
	mi := &file_criu_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCoreEntry.ProtoReflect.Descriptor instead.
func (*TaskCoreEntry) Descriptor() ([]byte, []int) {
	return file_criu_core_proto_rawDescGZIP(), []int{0}
}

func (x *TaskCoreEntry) GetTaskState() uint32 {
	if x != nil && x.TaskState != nil {
		return *x.TaskState
	}
	return 0
}

func (x *TaskCoreEntry) GetExitCode() uint32 {
	if x != nil && x.ExitCode != nil {
		return *x.ExitCode
	}
	return 0
}

func (x *TaskCoreEntry) GetPersonality() uint32 {
	if x != nil && x.Personality != nil {
		return *x.Personality
	}
	return 0
}

func (x *TaskCoreEntry) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *TaskCoreEntry) GetBlkSigset() uint64 {
	if x != nil && x.BlkSigset != nil {
		return *x.BlkSigset
	}
	return 0
}

func (x *TaskCoreEntry) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *TaskCoreEntry) GetTimers() *TaskTimersEntry {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *TaskCoreEntry) GetRlimits() *TaskRlimitsEntry {
	if x != nil {
		return x.Rlimits
	}
	return nil
}

func (x *TaskCoreEntry) GetCgSet() uint32 {
	if x != nil && x.CgSet != nil {
		return *x.CgSet
	}
	return 0
}

func (x *TaskCoreEntry) GetSignalsS() *SignalQueueEntry {
	if x != nil {
		return x.SignalsS
	}
	return nil
}

func (x *TaskCoreEntry) GetOldSeccompMode() SeccompMode {
	if x != nil && x.OldSeccompMode != nil {
		return *x.OldSeccompMode
	}
	return SeccompMode_disabled
}

func (x *TaskCoreEntry) GetOldSeccompFilter() uint32 {
	if x != nil && x.OldSeccompFilter != nil {
		return *x.OldSeccompFilter
	}
	return 0
}

func (x *TaskCoreEntry) GetLoginuid() uint32 {
	if x != nil && x.Loginuid != nil {
		return *x.Loginuid
	}
	return 0
}

func (x *TaskCoreEntry) GetOomScoreAdj() int32 {
	if x != nil && x.OomScoreAdj != nil {
		return *x.OomScoreAdj
	}
	return 0
}

func (x *TaskCoreEntry) GetSigactions() []*SaEntry {
	if x != nil {
		return x.Sigactions
	}
	return nil
}

func (x *TaskCoreEntry) GetChildSubreaper() bool {
	if x != nil && x.ChildSubreaper != nil {
		return *x.ChildSubreaper
	}
	return false
}

func (x *TaskCoreEntry) GetBlkSigsetExtended() uint64 {
	if x != nil && x.BlkSigsetExtended != nil {
		return *x.BlkSigsetExtended
	}
	return 0
}

type TaskKobjIdsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmId       *uint32 `protobuf:"varint,1,req,name=vm_id,json=vmId" json:"vm_id,omitempty"`
	FilesId    *uint32 `protobuf:"varint,2,req,name=files_id,json=filesId" json:"files_id,omitempty"`
	FsId       *uint32 `protobuf:"varint,3,req,name=fs_id,json=fsId" json:"fs_id,omitempty"`
	SighandId  *uint32 `protobuf:"varint,4,req,name=sighand_id,json=sighandId" json:"sighand_id,omitempty"`
	PidNsId    *uint32 `protobuf:"varint,5,opt,name=pid_ns_id,json=pidNsId" json:"pid_ns_id,omitempty"`
	NetNsId    *uint32 `protobuf:"varint,6,opt,name=net_ns_id,json=netNsId" json:"net_ns_id,omitempty"`
	IpcNsId    *uint32 `protobuf:"varint,7,opt,name=ipc_ns_id,json=ipcNsId" json:"ipc_ns_id,omitempty"`
	UtsNsId    *uint32 `protobuf:"varint,8,opt,name=uts_ns_id,json=utsNsId" json:"uts_ns_id,omitempty"`
	MntNsId    *uint32 `protobuf:"varint,9,opt,name=mnt_ns_id,json=mntNsId" json:"mnt_ns_id,omitempty"`
	UserNsId   *uint32 `protobuf:"varint,10,opt,name=user_ns_id,json=userNsId" json:"user_ns_id,omitempty"`
	CgroupNsId *uint32 `protobuf:"varint,11,opt,name=cgroup_ns_id,json=cgroupNsId" json:"cgroup_ns_id,omitempty"`
	TimeNsId   *uint32 `protobuf:"varint,12,opt,name=time_ns_id,json=timeNsId" json:"time_ns_id,omitempty"`
}

func (x *TaskKobjIdsEntry) Reset() {
	*x = TaskKobjIdsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criu_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskKobjIdsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskKobjIdsEntry) ProtoMessage() {}

func (x *TaskKobjIdsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_criu_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskKobjIdsEntry.ProtoReflect.Descriptor instead.
func (*TaskKobjIdsEntry) Descriptor() ([]byte, []int) {
	return file_criu_core_proto_rawDescGZIP(), []int{1}
}

func (x *TaskKobjIdsEntry) GetVmId() uint32 {
	if x != nil && x.VmId != nil {
		return *x.VmId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetFilesId() uint32 {
	if x != nil && x.FilesId != nil {
		return *x.FilesId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetFsId() uint32 {
	if x != nil && x.FsId != nil {
		return *x.FsId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetSighandId() uint32 {
	if x != nil && x.SighandId != nil {
		return *x.SighandId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetPidNsId() uint32 {
	if x != nil && x.PidNsId != nil {
		return *x.PidNsId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetNetNsId() uint32 {
	if x != nil && x.NetNsId != nil {
		return *x.NetNsId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetIpcNsId() uint32 {
	if x != nil && x.IpcNsId != nil {
		return *x.IpcNsId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetUtsNsId() uint32 {
	if x != nil && x.UtsNsId != nil {
		return *x.UtsNsId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetMntNsId() uint32 {
	if x != nil && x.MntNsId != nil {
		return *x.MntNsId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetUserNsId() uint32 {
	if x != nil && x.UserNsId != nil {
		return *x.UserNsId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetCgroupNsId() uint32 {
	if x != nil && x.CgroupNsId != nil {
		return *x.CgroupNsId
	}
	return 0
}

func (x *TaskKobjIdsEntry) GetTimeNsId() uint32 {
	if x != nil && x.TimeNsId != nil {
		return *x.TimeNsId
	}
	return 0
}

type ThreadSasEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsSp    *uint64 `protobuf:"varint,1,req,name=ss_sp,json=ssSp" json:"ss_sp,omitempty"`
	SsSize  *uint64 `protobuf:"varint,2,req,name=ss_size,json=ssSize" json:"ss_size,omitempty"`
	SsFlags *uint32 `protobuf:"varint,3,req,name=ss_flags,json=ssFlags" json:"ss_flags,omitempty"`
}

func (x *ThreadSasEntry) Reset() {
	*x = ThreadSasEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criu_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadSasEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadSasEntry) ProtoMessage() {}

func (x *ThreadSasEntry) ProtoReflect() protoreflect.Message {
	mi := &file_criu_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadSasEntry.ProtoReflect.Descriptor instead.
func (*ThreadSasEntry) Descriptor() ([]byte, []int) {
	return file_criu_core_proto_rawDescGZIP(), []int{2}
}

func (x *ThreadSasEntry) GetSsSp() uint64 {
	if x != nil && x.SsSp != nil {
		return *x.SsSp
	}
	return 0
}

func (x *ThreadSasEntry) GetSsSize() uint64 {
	if x != nil && x.SsSize != nil {
		return *x.SsSize
	}
	return 0
}

func (x *ThreadSasEntry) GetSsFlags() uint32 {
	if x != nil && x.SsFlags != nil {
		return *x.SsFlags
	}
	return 0
}

type ThreadCoreEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FutexRla          *uint64           `protobuf:"varint,1,req,name=futex_rla,json=futexRla" json:"futex_rla,omitempty"`
	FutexRlaLen       *uint32           `protobuf:"varint,2,req,name=futex_rla_len,json=futexRlaLen" json:"futex_rla_len,omitempty"`
	SchedNice         *int32            `protobuf:"zigzag32,3,opt,name=sched_nice,json=schedNice" json:"sched_nice,omitempty"`
	SchedPolicy       *uint32           `protobuf:"varint,4,opt,name=sched_policy,json=schedPolicy" json:"sched_policy,omitempty"`
	SchedPrio         *uint32           `protobuf:"varint,5,opt,name=sched_prio,json=schedPrio" json:"sched_prio,omitempty"`
	BlkSigset         *uint64           `protobuf:"varint,6,opt,name=blk_sigset,json=blkSigset" json:"blk_sigset,omitempty"`
	Sas               *ThreadSasEntry   `protobuf:"bytes,7,opt,name=sas" json:"sas,omitempty"`
	PdeathSig         *uint32           `protobuf:"varint,8,opt,name=pdeath_sig,json=pdeathSig" json:"pdeath_sig,omitempty"`
	SignalsP          *SignalQueueEntry `protobuf:"bytes,9,opt,name=signals_p,json=signalsP" json:"signals_p,omitempty"`
	Creds             *CredsEntry       `protobuf:"bytes,10,opt,name=creds" json:"creds,omitempty"`
	SeccompMode       *SeccompMode      `protobuf:"varint,11,opt,name=seccomp_mode,json=seccompMode,enum=SeccompMode" json:"seccomp_mode,omitempty"`
	SeccompFilter     *uint32           `protobuf:"varint,12,opt,name=seccomp_filter,json=seccompFilter" json:"seccomp_filter,omitempty"`
	Comm              *string           `protobuf:"bytes,13,opt,name=comm" json:"comm,omitempty"`
	BlkSigsetExtended *uint64           `protobuf:"varint,14,opt,name=blk_sigset_extended,json=blkSigsetExtended" json:"blk_sigset_extended,omitempty"`
	RseqEntry         *RseqEntry        `protobuf:"bytes,15,opt,name=rseq_entry,json=rseqEntry" json:"rseq_entry,omitempty"`
}

func (x *ThreadCoreEntry) Reset() {
	*x = ThreadCoreEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criu_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadCoreEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadCoreEntry) ProtoMessage() {}

func (x *ThreadCoreEntry) ProtoReflect() protoreflect.Message {
	mi := &file_criu_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadCoreEntry.ProtoReflect.Descriptor instead.
func (*ThreadCoreEntry) Descriptor() ([]byte, []int) {
	return file_criu_core_proto_rawDescGZIP(), []int{3}
}

func (x *ThreadCoreEntry) GetFutexRla() uint64 {
	if x != nil && x.FutexRla != nil {
		return *x.FutexRla
	}
	return 0
}

func (x *ThreadCoreEntry) GetFutexRlaLen() uint32 {
	if x != nil && x.FutexRlaLen != nil {
		return *x.FutexRlaLen
	}
	return 0
}

func (x *ThreadCoreEntry) GetSchedNice() int32 {
	if x != nil && x.SchedNice != nil {
		return *x.SchedNice
	}
	return 0
}

func (x *ThreadCoreEntry) GetSchedPolicy() uint32 {
	if x != nil && x.SchedPolicy != nil {
		return *x.SchedPolicy
	}
	return 0
}

func (x *ThreadCoreEntry) GetSchedPrio() uint32 {
	if x != nil && x.SchedPrio != nil {
		return *x.SchedPrio
	}
	return 0
}

func (x *ThreadCoreEntry) GetBlkSigset() uint64 {
	if x != nil && x.BlkSigset != nil {
		return *x.BlkSigset
	}
	return 0
}

func (x *ThreadCoreEntry) GetSas() *ThreadSasEntry {
	if x != nil {
		return x.Sas
	}
	return nil
}

func (x *ThreadCoreEntry) GetPdeathSig() uint32 {
	if x != nil && x.PdeathSig != nil {
		return *x.PdeathSig
	}
	return 0
}

func (x *ThreadCoreEntry) GetSignalsP() *SignalQueueEntry {
	if x != nil {
		return x.SignalsP
	}
	return nil
}

func (x *ThreadCoreEntry) GetCreds() *CredsEntry {
	if x != nil {
		return x.Creds
	}
	return nil
}

func (x *ThreadCoreEntry) GetSeccompMode() SeccompMode {
	if x != nil && x.SeccompMode != nil {
		return *x.SeccompMode
	}
	return SeccompMode_disabled
}

func (x *ThreadCoreEntry) GetSeccompFilter() uint32 {
	if x != nil && x.SeccompFilter != nil {
		return *x.SeccompFilter
	}
	return 0
}

func (x *ThreadCoreEntry) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *ThreadCoreEntry) GetBlkSigsetExtended() uint64 {
	if x != nil && x.BlkSigsetExtended != nil {
		return *x.BlkSigsetExtended
	}
	return 0
}

func (x *ThreadCoreEntry) GetRseqEntry() *RseqEntry {
	if x != nil {
		return x.RseqEntry
	}
	return nil
}

type TaskRlimitsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rlimits []*RlimitEntry `protobuf:"bytes,1,rep,name=rlimits" json:"rlimits,omitempty"`
}

func (x *TaskRlimitsEntry) Reset() {
	*x = TaskRlimitsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criu_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRlimitsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRlimitsEntry) ProtoMessage() {}

func (x *TaskRlimitsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_criu_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRlimitsEntry.ProtoReflect.Descriptor instead.
func (*TaskRlimitsEntry) Descriptor() ([]byte, []int) {
	return file_criu_core_proto_rawDescGZIP(), []int{4}
}

func (x *TaskRlimitsEntry) GetRlimits() []*RlimitEntry {
	if x != nil {
		return x.Rlimits
	}
	return nil
}

type CoreEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtype      *CoreEntryMarch    `protobuf:"varint,1,req,name=mtype,enum=CoreEntryMarch" json:"mtype,omitempty"`
	ThreadInfo *ThreadInfoX86     `protobuf:"bytes,2,opt,name=thread_info,json=threadInfo" json:"thread_info,omitempty"`
	TiArm      *ThreadInfoArm     `protobuf:"bytes,6,opt,name=ti_arm,json=tiArm" json:"ti_arm,omitempty"`
	TiAarch64  *ThreadInfoAarch64 `protobuf:"bytes,8,opt,name=ti_aarch64,json=tiAarch64" json:"ti_aarch64,omitempty"`
	TiPpc64    *ThreadInfoPpc64   `protobuf:"bytes,9,opt,name=ti_ppc64,json=tiPpc64" json:"ti_ppc64,omitempty"`
	TiS390     *ThreadInfoS390    `protobuf:"bytes,10,opt,name=ti_s390,json=tiS390" json:"ti_s390,omitempty"`
	TiMips     *ThreadInfoMips    `protobuf:"bytes,11,opt,name=ti_mips,json=tiMips" json:"ti_mips,omitempty"`
	Tc         *TaskCoreEntry     `protobuf:"bytes,3,opt,name=tc" json:"tc,omitempty"`
	Ids        *TaskKobjIdsEntry  `protobuf:"bytes,4,opt,name=ids" json:"ids,omitempty"`
	ThreadCore *ThreadCoreEntry   `protobuf:"bytes,5,opt,name=thread_core,json=threadCore" json:"thread_core,omitempty"`
}

func (x *CoreEntry) Reset() {
	*x = CoreEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criu_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreEntry) ProtoMessage() {}

func (x *CoreEntry) ProtoReflect() protoreflect.Message {
	mi := &file_criu_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreEntry.ProtoReflect.Descriptor instead.
func (*CoreEntry) Descriptor() ([]byte, []int) {
	return file_criu_core_proto_rawDescGZIP(), []int{5}
}

func (x *CoreEntry) GetMtype() CoreEntryMarch {
	if x != nil && x.Mtype != nil {
		return *x.Mtype
	}
	return CoreEntry_UNKNOWN
}

func (x *CoreEntry) GetThreadInfo() *ThreadInfoX86 {
	if x != nil {
		return x.ThreadInfo
	}
	return nil
}

func (x *CoreEntry) GetTiArm() *ThreadInfoArm {
	if x != nil {
		return x.TiArm
	}
	return nil
}

func (x *CoreEntry) GetTiAarch64() *ThreadInfoAarch64 {
	if x != nil {
		return x.TiAarch64
	}
	return nil
}

func (x *CoreEntry) GetTiPpc64() *ThreadInfoPpc64 {
	if x != nil {
		return x.TiPpc64
	}
	return nil
}

func (x *CoreEntry) GetTiS390() *ThreadInfoS390 {
	if x != nil {
		return x.TiS390
	}
	return nil
}

func (x *CoreEntry) GetTiMips() *ThreadInfoMips {
	if x != nil {
		return x.TiMips
	}
	return nil
}

func (x *CoreEntry) GetTc() *TaskCoreEntry {
	if x != nil {
		return x.Tc
	}
	return nil
}

func (x *CoreEntry) GetIds() *TaskKobjIdsEntry {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *CoreEntry) GetThreadCore() *ThreadCoreEntry {
	if x != nil {
		return x.ThreadCore
	}
	return nil
}

var File_criu_core_proto protoreflect.FileDescriptor

var file_criu_core_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x72, 0x69, 0x75, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x78, 0x38, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x61, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x61, 0x61, 0x72, 0x63, 0x68, 0x36, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x70, 0x63, 0x36,
	0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x73, 0x33,
	0x39, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d,
	0x69, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x72, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x63, 0x72, 0x69, 0x75, 0x2d, 0x73, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x73, 0x69, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x72, 0x73, 0x65, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6f, 0x70, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x05, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x42,
	0x08, 0xd2, 0x3f, 0x05, 0x32, 0x03, 0x67, 0x65, 0x6e, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x62, 0x6c, 0x6b,
	0x5f, 0x73, 0x69, 0x67, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0xd2,
	0x3f, 0x02, 0x08, 0x01, 0x52, 0x09, 0x62, 0x6c, 0x6b, 0x53, 0x69, 0x67, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x6d, 0x6d, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12,
	0x2d, 0x0a, 0x07, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x67, 0x53, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x5f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x53, 0x12, 0x37, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x5f, 0x73,
	0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x6c,
	0x64, 0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6f,
	0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x12, 0x29,
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x73, 0x61, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x61, 0x70, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x62, 0x72, 0x65, 0x61, 0x70,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x13, 0x62, 0x6c, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x73, 0x65, 0x74,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0xd2, 0x3f, 0x02, 0x08, 0x01, 0x52, 0x11, 0x62, 0x6c, 0x6b, 0x53, 0x69, 0x67, 0x73, 0x65,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0xe3, 0x02, 0x0a, 0x13, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6b, 0x6f, 0x62, 0x6a, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x04, 0x66, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x68, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x69, 0x67, 0x68,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x70, 0x69, 0x64, 0x5f, 0x6e, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x69, 0x64, 0x4e, 0x73, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x4e, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x09, 0x69, 0x70, 0x63, 0x5f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x69, 0x70, 0x63, 0x4e, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x75, 0x74, 0x73,
	0x5f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x74,
	0x73, 0x4e, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x6d, 0x6e, 0x74, 0x5f, 0x6e, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6e, 0x74, 0x4e, 0x73, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x73, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x73, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x49, 0x64, 0x22,
	0x5b, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x61, 0x73, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x73, 0x53, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x73, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x73, 0x73, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb7, 0x04, 0x0a,
	0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x74, 0x65, 0x78, 0x5f, 0x72, 0x6c, 0x61, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x66, 0x75, 0x74, 0x65, 0x78, 0x52, 0x6c, 0x61, 0x12,
	0x22, 0x0a, 0x0d, 0x66, 0x75, 0x74, 0x65, 0x78, 0x5f, 0x72, 0x6c, 0x61, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75, 0x74, 0x65, 0x78, 0x52, 0x6c, 0x61,
	0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x4e, 0x69,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x73,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6b, 0x53, 0x69, 0x67,
	0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x73, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x61, 0x73, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x03, 0x73, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x53, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x73, 0x5f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x50, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x72, 0x65,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x73,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6c,
	0x6b, 0x5f, 0x73, 0x69, 0x67, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x6c, 0x6b, 0x53, 0x69, 0x67, 0x73,
	0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x72, 0x73,
	0x65, 0x71, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x72, 0x73, 0x65, 0x71, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x73, 0x65,
	0x71, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3d, 0x0a, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xa3, 0x04, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x78, 0x38, 0x36, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x0a, 0x06, 0x74, 0x69, 0x5f, 0x61, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61,
	0x72, 0x6d, 0x52, 0x05, 0x74, 0x69, 0x41, 0x72, 0x6d, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x69, 0x5f,
	0x61, 0x61, 0x72, 0x63, 0x68, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x61, 0x72, 0x63,
	0x68, 0x36, 0x34, 0x52, 0x09, 0x74, 0x69, 0x41, 0x61, 0x72, 0x63, 0x68, 0x36, 0x34, 0x12, 0x2d,
	0x0a, 0x08, 0x74, 0x69, 0x5f, 0x70, 0x70, 0x63, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70,
	0x70, 0x63, 0x36, 0x34, 0x52, 0x07, 0x74, 0x69, 0x50, 0x70, 0x63, 0x36, 0x34, 0x12, 0x2a, 0x0a,
	0x07, 0x74, 0x69, 0x5f, 0x73, 0x33, 0x39, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x33, 0x39,
	0x30, 0x52, 0x06, 0x74, 0x69, 0x53, 0x33, 0x39, 0x30, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x69, 0x5f,
	0x6d, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x69, 0x70, 0x73, 0x52, 0x06, 0x74,
	0x69, 0x4d, 0x69, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x02, 0x74, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x02, 0x74, 0x63, 0x12, 0x26, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x6f, 0x62, 0x6a,
	0x5f, 0x69, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x33, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x72, 0x65, 0x22, 0x55, 0x0a, 0x05, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x38,
	0x36, 0x5f, 0x36, 0x34, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x4d, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x41, 0x52, 0x43, 0x48, 0x36, 0x34, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x50, 0x43, 0x36, 0x34, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x33, 0x39, 0x30, 0x10,
	0x05, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x50, 0x53, 0x10, 0x06, 0x2a, 0x34, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10,
	0x02,
}

var (
	file_criu_core_proto_rawDescOnce sync.Once
	file_criu_core_proto_rawDescData = file_criu_core_proto_rawDesc
)

func file_criu_core_proto_rawDescGZIP() []byte {
	file_criu_core_proto_rawDescOnce.Do(func() {
		file_criu_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_criu_core_proto_rawDescData)
	})
	return file_criu_core_proto_rawDescData
}

var file_criu_core_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_criu_core_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_criu_core_proto_goTypes = []interface{}{
	(SeccompMode)(0),          // 0: seccomp_mode
	(CoreEntryMarch)(0),       // 1: core_entry.march
	(*TaskCoreEntry)(nil),     // 2: task_core_entry
	(*TaskKobjIdsEntry)(nil),  // 3: task_kobj_ids_entry
	(*ThreadSasEntry)(nil),    // 4: thread_sas_entry
	(*ThreadCoreEntry)(nil),   // 5: thread_core_entry
	(*TaskRlimitsEntry)(nil),  // 6: task_rlimits_entry
	(*CoreEntry)(nil),         // 7: core_entry
	(*TaskTimersEntry)(nil),   // 8: task_timers_entry
	(*SignalQueueEntry)(nil),  // 9: signal_queue_entry
	(*SaEntry)(nil),           // 10: sa_entry
	(*CredsEntry)(nil),        // 11: creds_entry
	(*RseqEntry)(nil),         // 12: rseq_entry
	(*RlimitEntry)(nil),       // 13: rlimit_entry
	(*ThreadInfoX86)(nil),     // 14: thread_info_x86
	(*ThreadInfoArm)(nil),     // 15: thread_info_arm
	(*ThreadInfoAarch64)(nil), // 16: thread_info_aarch64
	(*ThreadInfoPpc64)(nil),   // 17: thread_info_ppc64
	(*ThreadInfoS390)(nil),    // 18: thread_info_s390
	(*ThreadInfoMips)(nil),    // 19: thread_info_mips
}
var file_criu_core_proto_depIdxs = []int32{
	8,  // 0: task_core_entry.timers:type_name -> task_timers_entry
	6,  // 1: task_core_entry.rlimits:type_name -> task_rlimits_entry
	9,  // 2: task_core_entry.signals_s:type_name -> signal_queue_entry
	0,  // 3: task_core_entry.old_seccomp_mode:type_name -> seccomp_mode
	10, // 4: task_core_entry.sigactions:type_name -> sa_entry
	4,  // 5: thread_core_entry.sas:type_name -> thread_sas_entry
	9,  // 6: thread_core_entry.signals_p:type_name -> signal_queue_entry
	11, // 7: thread_core_entry.creds:type_name -> creds_entry
	0,  // 8: thread_core_entry.seccomp_mode:type_name -> seccomp_mode
	12, // 9: thread_core_entry.rseq_entry:type_name -> rseq_entry
	13, // 10: task_rlimits_entry.rlimits:type_name -> rlimit_entry
	1,  // 11: core_entry.mtype:type_name -> core_entry.march
	14, // 12: core_entry.thread_info:type_name -> thread_info_x86
	15, // 13: core_entry.ti_arm:type_name -> thread_info_arm
	16, // 14: core_entry.ti_aarch64:type_name -> thread_info_aarch64
	17, // 15: core_entry.ti_ppc64:type_name -> thread_info_ppc64
	18, // 16: core_entry.ti_s390:type_name -> thread_info_s390
	19, // 17: core_entry.ti_mips:type_name -> thread_info_mips
	2,  // 18: core_entry.tc:type_name -> task_core_entry
	3,  // 19: core_entry.ids:type_name -> task_kobj_ids_entry
	5,  // 20: core_entry.thread_core:type_name -> thread_core_entry
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_criu_core_proto_init() }
func file_criu_core_proto_init() {
	if File_criu_core_proto != nil {
		return
	}
	file_core_x86_proto_init()
	file_core_arm_proto_init()
	file_core_aarch64_proto_init()
	file_core_ppc64_proto_init()
	file_core_s390_proto_init()
	file_core_mips_proto_init()
	file_rlimit_proto_init()
	file_timer_proto_init()
	file_creds_proto_init()
	file_criu_sa_proto_init()
	file_siginfo_proto_init()
	file_rseq_proto_init()
	file_opts_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_criu_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCoreEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_criu_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskKobjIdsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_criu_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadSasEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_criu_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadCoreEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_criu_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRlimitsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_criu_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_criu_core_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_criu_core_proto_goTypes,
		DependencyIndexes: file_criu_core_proto_depIdxs,
		EnumInfos:         file_criu_core_proto_enumTypes,
		MessageInfos:      file_criu_core_proto_msgTypes,
	}.Build()
	File_criu_core_proto = out.File
	file_criu_core_proto_rawDesc = nil
	file_criu_core_proto_goTypes = nil
	file_criu_core_proto_depIdxs = nil
}
