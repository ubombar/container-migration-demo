// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: sk-inet.proto

package images

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpOptsRawEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdrincl     *bool    `protobuf:"varint,1,opt,name=hdrincl" json:"hdrincl,omitempty"`
	Nodefrag    *bool    `protobuf:"varint,2,opt,name=nodefrag" json:"nodefrag,omitempty"`
	Checksum    *bool    `protobuf:"varint,3,opt,name=checksum" json:"checksum,omitempty"`
	IcmpvFilter []uint32 `protobuf:"varint,4,rep,name=icmpv_filter,json=icmpvFilter" json:"icmpv_filter,omitempty"`
}

func (x *IpOptsRawEntry) Reset() {
	*x = IpOptsRawEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk_inet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpOptsRawEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpOptsRawEntry) ProtoMessage() {}

func (x *IpOptsRawEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sk_inet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpOptsRawEntry.ProtoReflect.Descriptor instead.
func (*IpOptsRawEntry) Descriptor() ([]byte, []int) {
	return file_sk_inet_proto_rawDescGZIP(), []int{0}
}

func (x *IpOptsRawEntry) GetHdrincl() bool {
	if x != nil && x.Hdrincl != nil {
		return *x.Hdrincl
	}
	return false
}

func (x *IpOptsRawEntry) GetNodefrag() bool {
	if x != nil && x.Nodefrag != nil {
		return *x.Nodefrag
	}
	return false
}

func (x *IpOptsRawEntry) GetChecksum() bool {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return false
}

func (x *IpOptsRawEntry) GetIcmpvFilter() []uint32 {
	if x != nil {
		return x.IcmpvFilter
	}
	return nil
}

type IpOptsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Freebind *bool `protobuf:"varint,1,opt,name=freebind" json:"freebind,omitempty"`
	// Fields 2 and 3 are reserved for vz7 use
	Raw *IpOptsRawEntry `protobuf:"bytes,4,opt,name=raw" json:"raw,omitempty"`
}

func (x *IpOptsEntry) Reset() {
	*x = IpOptsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk_inet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpOptsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpOptsEntry) ProtoMessage() {}

func (x *IpOptsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sk_inet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpOptsEntry.ProtoReflect.Descriptor instead.
func (*IpOptsEntry) Descriptor() ([]byte, []int) {
	return file_sk_inet_proto_rawDescGZIP(), []int{1}
}

func (x *IpOptsEntry) GetFreebind() bool {
	if x != nil && x.Freebind != nil {
		return *x.Freebind
	}
	return false
}

func (x *IpOptsEntry) GetRaw() *IpOptsRawEntry {
	if x != nil {
		return x.Raw
	}
	return nil
}

type InetSkEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// We have two IDs here -- id and ino. The first one
	// is used when restoring socket behind a file descriprot.
	// The fdinfo image's id is it. The second one is used
	// in sk-inet.c internally, in particular we identify
	// a TCP stream to restore into this socket using the
	// ino value.
	Id      *uint32      `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Ino     *uint32      `protobuf:"varint,2,req,name=ino" json:"ino,omitempty"`
	Family  *uint32      `protobuf:"varint,3,req,name=family" json:"family,omitempty"`
	Type    *uint32      `protobuf:"varint,4,req,name=type" json:"type,omitempty"`
	Proto   *uint32      `protobuf:"varint,5,req,name=proto" json:"proto,omitempty"`
	State   *uint32      `protobuf:"varint,6,req,name=state" json:"state,omitempty"`
	SrcPort *uint32      `protobuf:"varint,7,req,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort *uint32      `protobuf:"varint,8,req,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	Flags   *uint32      `protobuf:"varint,9,req,name=flags" json:"flags,omitempty"`
	Backlog *uint32      `protobuf:"varint,10,req,name=backlog" json:"backlog,omitempty"`
	SrcAddr []uint32     `protobuf:"varint,11,rep,name=src_addr,json=srcAddr" json:"src_addr,omitempty"`
	DstAddr []uint32     `protobuf:"varint,12,rep,name=dst_addr,json=dstAddr" json:"dst_addr,omitempty"`
	Fown    *FownEntry   `protobuf:"bytes,13,req,name=fown" json:"fown,omitempty"`
	Opts    *SkOptsEntry `protobuf:"bytes,14,req,name=opts" json:"opts,omitempty"`
	V6Only  *bool        `protobuf:"varint,15,opt,name=v6only" json:"v6only,omitempty"`
	IpOpts  *IpOptsEntry `protobuf:"bytes,16,opt,name=ip_opts,json=ipOpts" json:"ip_opts,omitempty"`
	// for ipv6, we need to send the ifindex to bind(); we keep the ifname
	// here and convert it on restore
	Ifname   *string     `protobuf:"bytes,17,opt,name=ifname" json:"ifname,omitempty"`
	NsId     *uint32     `protobuf:"varint,18,opt,name=ns_id,json=nsId" json:"ns_id,omitempty"`
	Shutdown *SkShutdown `protobuf:"varint,19,opt,name=shutdown,enum=SkShutdown" json:"shutdown,omitempty"`
}

func (x *InetSkEntry) Reset() {
	*x = InetSkEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk_inet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InetSkEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InetSkEntry) ProtoMessage() {}

func (x *InetSkEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sk_inet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InetSkEntry.ProtoReflect.Descriptor instead.
func (*InetSkEntry) Descriptor() ([]byte, []int) {
	return file_sk_inet_proto_rawDescGZIP(), []int{2}
}

func (x *InetSkEntry) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *InetSkEntry) GetIno() uint32 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *InetSkEntry) GetFamily() uint32 {
	if x != nil && x.Family != nil {
		return *x.Family
	}
	return 0
}

func (x *InetSkEntry) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *InetSkEntry) GetProto() uint32 {
	if x != nil && x.Proto != nil {
		return *x.Proto
	}
	return 0
}

func (x *InetSkEntry) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *InetSkEntry) GetSrcPort() uint32 {
	if x != nil && x.SrcPort != nil {
		return *x.SrcPort
	}
	return 0
}

func (x *InetSkEntry) GetDstPort() uint32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *InetSkEntry) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *InetSkEntry) GetBacklog() uint32 {
	if x != nil && x.Backlog != nil {
		return *x.Backlog
	}
	return 0
}

func (x *InetSkEntry) GetSrcAddr() []uint32 {
	if x != nil {
		return x.SrcAddr
	}
	return nil
}

func (x *InetSkEntry) GetDstAddr() []uint32 {
	if x != nil {
		return x.DstAddr
	}
	return nil
}

func (x *InetSkEntry) GetFown() *FownEntry {
	if x != nil {
		return x.Fown
	}
	return nil
}

func (x *InetSkEntry) GetOpts() *SkOptsEntry {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *InetSkEntry) GetV6Only() bool {
	if x != nil && x.V6Only != nil {
		return *x.V6Only
	}
	return false
}

func (x *InetSkEntry) GetIpOpts() *IpOptsEntry {
	if x != nil {
		return x.IpOpts
	}
	return nil
}

func (x *InetSkEntry) GetIfname() string {
	if x != nil && x.Ifname != nil {
		return *x.Ifname
	}
	return ""
}

func (x *InetSkEntry) GetNsId() uint32 {
	if x != nil && x.NsId != nil {
		return *x.NsId
	}
	return 0
}

func (x *InetSkEntry) GetShutdown() SkShutdown {
	if x != nil && x.Shutdown != nil {
		return *x.Shutdown
	}
	return SkShutdown_NONE
}

var File_sk_inet_proto protoreflect.FileDescriptor

var file_sk_inet_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x6b, 0x2d, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x66, 0x6f, 0x77,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x6b, 0x2d, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x6f, 0x70,
	0x74, 0x73, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x64, 0x72, 0x69, 0x6e, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x64, 0x72, 0x69, 0x6e, 0x63, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x66, 0x72,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x66, 0x72,
	0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x51, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x24,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x70,
	0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x22, 0xbb, 0x04, 0x0a, 0x0d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x6b,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x1f, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x07, 0xd2, 0x3f, 0x04, 0x32, 0x02, 0x73,
	0x6b, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x07, 0xd2, 0x3f, 0x04, 0x32, 0x02, 0x73, 0x6b,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x07, 0xd2, 0x3f, 0x04, 0x32, 0x02, 0x73, 0x6b, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0d, 0x42, 0x07, 0xd2, 0x3f, 0x04, 0x32, 0x02, 0x73, 0x6b, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x05, 0xd2, 0x3f, 0x02, 0x08, 0x01,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x67, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x67, 0x12, 0x20, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x05, 0xd2, 0x3f, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x05, 0xd2, 0x3f, 0x02, 0x10, 0x01, 0x52, 0x07, 0x64, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x04, 0x66, 0x6f, 0x77, 0x6e, 0x18, 0x0d, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x66, 0x6f, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x36,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x36, 0x6f, 0x6e,
	0x6c, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x70, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6b, 0x5f,
	0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e,
}

var (
	file_sk_inet_proto_rawDescOnce sync.Once
	file_sk_inet_proto_rawDescData = file_sk_inet_proto_rawDesc
)

func file_sk_inet_proto_rawDescGZIP() []byte {
	file_sk_inet_proto_rawDescOnce.Do(func() {
		file_sk_inet_proto_rawDescData = protoimpl.X.CompressGZIP(file_sk_inet_proto_rawDescData)
	})
	return file_sk_inet_proto_rawDescData
}

var file_sk_inet_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sk_inet_proto_goTypes = []interface{}{
	(*IpOptsRawEntry)(nil), // 0: ip_opts_raw_entry
	(*IpOptsEntry)(nil),    // 1: ip_opts_entry
	(*InetSkEntry)(nil),    // 2: inet_sk_entry
	(*FownEntry)(nil),      // 3: fown_entry
	(*SkOptsEntry)(nil),    // 4: sk_opts_entry
	(SkShutdown)(0),        // 5: sk_shutdown
}
var file_sk_inet_proto_depIdxs = []int32{
	0, // 0: ip_opts_entry.raw:type_name -> ip_opts_raw_entry
	3, // 1: inet_sk_entry.fown:type_name -> fown_entry
	4, // 2: inet_sk_entry.opts:type_name -> sk_opts_entry
	1, // 3: inet_sk_entry.ip_opts:type_name -> ip_opts_entry
	5, // 4: inet_sk_entry.shutdown:type_name -> sk_shutdown
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_sk_inet_proto_init() }
func file_sk_inet_proto_init() {
	if File_sk_inet_proto != nil {
		return
	}
	file_opts_proto_init()
	file_fown_proto_init()
	file_sk_opts_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sk_inet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpOptsRawEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk_inet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpOptsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk_inet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InetSkEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sk_inet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sk_inet_proto_goTypes,
		DependencyIndexes: file_sk_inet_proto_depIdxs,
		MessageInfos:      file_sk_inet_proto_msgTypes,
	}.Build()
	File_sk_inet_proto = out.File
	file_sk_inet_proto_rawDesc = nil
	file_sk_inet_proto_goTypes = nil
	file_sk_inet_proto_depIdxs = nil
}
